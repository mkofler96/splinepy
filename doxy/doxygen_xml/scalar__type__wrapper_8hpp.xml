<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="scalar__type__wrapper_8hpp" kind="file" language="C++">
    <compoundname>scalar_type_wrapper.hpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">type_traits</includes>
    <includes refid="arrays_8hpp" local="no">splinepy/utils/arrays.hpp</includes>
    <includes refid="default__initialization__allocator_8hpp" local="no">splinepy/utils/default_initialization_allocator.hpp</includes>
    <includedby refid="bezier_8inl" local="yes">bezier.inl</includedby>
    <includedby refid="splines_2bspline_8hpp" local="yes">bspline.hpp</includedby>
    <includedby refid="splines_2nurbs_8hpp" local="no">nurbs.hpp</includedby>
    <includedby refid="rational__bezier_8inl" local="no">rational_bezier.inl</includedby>
    <includedby refid="py__spline__extensions_8cpp" local="yes">py_spline_extensions.cpp</includedby>
    <includedby refid="py__multipatch_8cpp" local="yes">py_multipatch.cpp</includedby>
    <incdepgraph>
      <node id="7">
        <label>iterator</label>
      </node>
      <node id="1">
        <label>scalar_type_wrapper.hpp</label>
        <link refid="scalar__type__wrapper_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>stdexcept</label>
      </node>
      <node id="8">
        <label>numeric</label>
      </node>
      <node id="9">
        <label>splinepy/utils/print.hpp</label>
        <link refid="print_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>array</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>splinepy/utils/arrays.hpp</label>
        <link refid="arrays_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>type_traits</label>
      </node>
      <node id="13">
        <label>splinepy/utils/default_initialization_allocator.hpp</label>
        <link refid="default__initialization__allocator_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="14">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22">
        <label>rational_bezier_explicit8.cpp</label>
        <link refid="rational__bezier__explicit8_8cpp"/>
      </node>
      <node id="35">
        <label>bezier_explicit9.cpp</label>
        <link refid="bezier__explicit9_8cpp"/>
      </node>
      <node id="23">
        <label>rational_bezier_explicit9.cpp</label>
        <link refid="rational__bezier__explicit9_8cpp"/>
      </node>
      <node id="25">
        <label>py_spline.cpp</label>
        <link refid="py__spline_8cpp"/>
      </node>
      <node id="9">
        <label>rational_bezier3.cpp</label>
        <link refid="rational__bezier3_8cpp"/>
      </node>
      <node id="8">
        <label>rational_bezier2.cpp</label>
        <link refid="rational__bezier2_8cpp"/>
      </node>
      <node id="1">
        <label>scalar_type_wrapper.hpp</label>
        <link refid="scalar__type__wrapper_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>rational_bezier.hpp</label>
        <link refid="splines_2rational__bezier_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>bezier3.cpp</label>
        <link refid="bezier3_8cpp"/>
      </node>
      <node id="37">
        <label>bspline_explicit.cpp</label>
        <link refid="bspline__explicit_8cpp"/>
      </node>
      <node id="13">
        <label>bezier2.cpp</label>
        <link refid="bezier2_8cpp"/>
      </node>
      <node id="12">
        <label>bezier1.cpp</label>
        <link refid="bezier1_8cpp"/>
      </node>
      <node id="7">
        <label>rational_bezier1.cpp</label>
        <link refid="rational__bezier1_8cpp"/>
      </node>
      <node id="26">
        <label>bezier_explicit1.cpp</label>
        <link refid="bezier__explicit1_8cpp"/>
      </node>
      <node id="42">
        <label>py_multipatch.cpp</label>
        <link refid="py__multipatch_8cpp"/>
      </node>
      <node id="17">
        <label>rational_bezier_explicit1.cpp</label>
        <link refid="rational__bezier__explicit1_8cpp"/>
      </node>
      <node id="28">
        <label>bezier_explicit2.cpp</label>
        <link refid="bezier__explicit2_8cpp"/>
      </node>
      <node id="16">
        <label>rational_bezier_explicit2.cpp</label>
        <link refid="rational__bezier__explicit2_8cpp"/>
      </node>
      <node id="3">
        <label>bezier.hpp</label>
        <link refid="splines_2bezier_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>create_bezier.hpp</label>
        <link refid="create__bezier_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>bezier_explicit3.cpp</label>
        <link refid="bezier__explicit3_8cpp"/>
      </node>
      <node id="24">
        <label>rational_bezier_explicit3.cpp</label>
        <link refid="rational__bezier__explicit3_8cpp"/>
      </node>
      <node id="4">
        <label>rational_bezier.inl</label>
        <link refid="rational__bezier_8inl"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>nurbs.hpp</label>
        <link refid="splines_2nurbs_8hpp"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>bezier_explicit4.cpp</label>
        <link refid="bezier__explicit4_8cpp"/>
      </node>
      <node id="18">
        <label>rational_bezier_explicit4.cpp</label>
        <link refid="rational__bezier__explicit4_8cpp"/>
      </node>
      <node id="30">
        <label>bezier_explicit5.cpp</label>
        <link refid="bezier__explicit5_8cpp"/>
      </node>
      <node id="19">
        <label>rational_bezier_explicit5.cpp</label>
        <link refid="rational__bezier__explicit5_8cpp"/>
      </node>
      <node id="36">
        <label>bspline.hpp</label>
        <link refid="splines_2bspline_8hpp"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>py_spline_extensions.cpp</label>
        <link refid="py__spline__extensions_8cpp"/>
      </node>
      <node id="27">
        <label>bezier_explicit10.cpp</label>
        <link refid="bezier__explicit10_8cpp"/>
      </node>
      <node id="10">
        <label>splinepy_base.cpp</label>
        <link refid="splinepy__base_8cpp"/>
      </node>
      <node id="15">
        <label>rational_bezier_explicit10.cpp</label>
        <link refid="rational__bezier__explicit10_8cpp"/>
      </node>
      <node id="2">
        <label>bezier.inl</label>
        <link refid="bezier_8inl"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>create_rational_bezier.hpp</label>
        <link refid="create__rational__bezier_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>py_spline_reader.cpp</label>
        <link refid="py__spline__reader_8cpp"/>
      </node>
      <node id="31">
        <label>bezier_explicit6.cpp</label>
        <link refid="bezier__explicit6_8cpp"/>
      </node>
      <node id="20">
        <label>rational_bezier_explicit6.cpp</label>
        <link refid="rational__bezier__explicit6_8cpp"/>
      </node>
      <node id="32">
        <label>bezier_explicit7.cpp</label>
        <link refid="bezier__explicit7_8cpp"/>
      </node>
      <node id="40">
        <label>nurbs_explicit.cpp</label>
        <link refid="nurbs__explicit_8cpp"/>
      </node>
      <node id="21">
        <label>rational_bezier_explicit7.cpp</label>
        <link refid="rational__bezier__explicit7_8cpp"/>
      </node>
      <node id="33">
        <label>bezier_explicit8.cpp</label>
        <link refid="bezier__explicit8_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacesplinepy">splinepy</innernamespace>
    <innernamespace refid="namespacesplinepy_1_1splines">splinepy::splines</innernamespace>
    <innernamespace refid="namespacesplinepy_1_1splines_1_1helpers">splinepy::splines::helpers</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Copyright<sp/>(c)<sp/>2021<sp/>Jaewook<sp/>Lee</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8"><highlight class="comment">in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9"><highlight class="comment">to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="10"><highlight class="comment">copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="11"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="14"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="22"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="arrays_8hpp" kindref="compound">splinepy/utils/arrays.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="default__initialization__allocator_8hpp" kindref="compound">splinepy/utils/default_initialization_allocator.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesplinepy_1_1splines_1_1helpers" kindref="compound">splinepy::splines::helpers</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>QueryType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputType&gt;</highlight></codeline>
<codeline lineno="36" refid="namespacesplinepy_1_1splines_1_1helpers_1ac43c5574e08a0bf9f361e46a265ad95c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1ac43c5574e08a0bf9f361e46a265ad95c" kindref="member">ScalarTypeEvaluate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SplineType&amp;<sp/>spline,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueryType*<sp/>query,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputType*<sp/>output)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Query<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::ParametricCoordinate_;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>QueryValueType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Query::value_type;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>Query<sp/>core_query;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>form<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i{};<sp/>i<sp/>&lt;<sp/>SplineType::kParaDim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>core_query[i]<sp/>=<sp/>QueryValueType{query[i]};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>core_evaluated<sp/>=<sp/>spline(core_query);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_scalar&lt;decltype(core_evaluated)&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>output[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">OutputType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(core_evaluated);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i{};<sp/>i<sp/>&lt;<sp/>SplineType::kDim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">OutputType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(core_evaluated[i]);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputType&gt;</highlight></codeline>
<codeline lineno="67" refid="namespacesplinepy_1_1splines_1_1helpers_1a2411a5c76f036f8c12a52fbcc2982c02" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1a2411a5c76f036f8c12a52fbcc2982c02" kindref="member">ScalarTypeBoundaryCenters</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SplineType&amp;<sp/>spline,<sp/>OutputType*<sp/>output)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1py_1af25a53aec82a347bf9329587384342f7" kindref="member">DoubleVector</ref><sp/>=<sp/><ref refid="namespacesplinepy_1_1utils_1a2b529e515e5f1021dafe102be9dce2fc" kindref="member">splinepy::utils::DefaultInitializationVector&lt;double&gt;</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>para_dim<sp/>=<sp/>spline.SplinepyParaDim();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>parametric<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>They<sp/>are<sp/>given<sp/>back<sp/>in<sp/>the<sp/>order<sp/>[min_0,<sp/>min_1,...,max_0,<sp/>max_1...]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="namespacesplinepy_1_1py_1af25a53aec82a347bf9329587384342f7" kindref="member">DoubleVector</ref><sp/>bounds_vector(2<sp/>*<sp/>para_dim);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>bounds<sp/>=<sp/>bounds_vector.data();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>spline.SplinepyParametricBounds(bounds);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>parametric<sp/>coordinate<sp/>queries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i{};<sp/>i<sp/>&lt;<sp/>para_dim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j{};<sp/>j<sp/>&lt;<sp/>para_dim;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[2<sp/>*<sp/>i<sp/>*<sp/>para_dim<sp/>+<sp/>j]<sp/>=<sp/>bounds[j];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[(2<sp/>*<sp/>i<sp/>+<sp/>1)<sp/>*<sp/>para_dim<sp/>+<sp/>j]<sp/>=<sp/>bounds[j<sp/>+<sp/>para_dim];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>.5<sp/>*<sp/>(bounds[j]<sp/>+<sp/>bounds[j<sp/>+<sp/>para_dim]);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[2<sp/>*<sp/>i<sp/>*<sp/>para_dim<sp/>+<sp/>j]<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[(2<sp/>*<sp/>i<sp/>+<sp/>1)<sp/>*<sp/>para_dim<sp/>+<sp/>j]<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputType&gt;</highlight></codeline>
<codeline lineno="97" refid="namespacesplinepy_1_1splines_1_1helpers_1acab2d940771d30fd9baf6eda020e1bb7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1acab2d940771d30fd9baf6eda020e1bb7" kindref="member">ScalarTypeEvaluateBoundaryCenters</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SplineType&amp;<sp/>spline,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputType*<sp/>output)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1py_1af25a53aec82a347bf9329587384342f7" kindref="member">DoubleVector</ref><sp/>=<sp/><ref refid="namespacesplinepy_1_1utils_1a2b529e515e5f1021dafe102be9dce2fc" kindref="member">splinepy::utils::DefaultInitializationVector&lt;double&gt;</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>para_dim<sp/>=<sp/>spline.SplinepyParaDim();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>spline.SplinepyDim();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_faces<sp/>=<sp/>2<sp/>*<sp/>para_dim;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="namespacesplinepy_1_1py_1af25a53aec82a347bf9329587384342f7" kindref="member">DoubleVector</ref><sp/>queries_vector(n_faces<sp/>*<sp/>para_dim);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>queries<sp/>=<sp/>queries_vector.data();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>queries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1a2411a5c76f036f8c12a52fbcc2982c02" kindref="member">ScalarTypeBoundaryCenters</ref>(spline,<sp/>queries);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Evaluate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i{};<sp/>i<sp/>&lt;<sp/>n_faces;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>spline.SplinepyEvaluate(&amp;queries[i<sp/>*<sp/>para_dim],<sp/>&amp;output[i<sp/>*<sp/>dim]);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>QueryType,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OrderType,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputType&gt;</highlight></codeline>
<codeline lineno="124" refid="namespacesplinepy_1_1splines_1_1helpers_1af98bb1f615fdb461970a305b67243936" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1af98bb1f615fdb461970a305b67243936" kindref="member">ScalarTypeDerivative</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SplineType&amp;<sp/>spline,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueryType*<sp/>query,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OrderType*<sp/>order,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputType*<sp/>output)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Query<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::ParametricCoordinate_;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>QueryValueType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Query::value_type;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Order<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::Derivative_;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>OrderValueType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Order::value_type;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>Query<sp/>core_query;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>Order<sp/>core_order;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>form<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i{};<sp/>i<sp/>&lt;<sp/>SplineType::kParaDim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>core_query[i]<sp/>=<sp/>QueryValueType{query[i]};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>core_order[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">OrderValueType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(order[i]);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>core_derived<sp/>=<sp/>spline(core_query,<sp/>core_order);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_scalar&lt;decltype(core_derived)&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>output[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">OutputType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(core_derived);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i{};<sp/>i<sp/>&lt;<sp/>SplineType::kDim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">OutputType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(core_derived[i]);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>QueryType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputType&gt;</highlight></codeline>
<codeline lineno="165" refid="namespacesplinepy_1_1splines_1_1helpers_1aaad4ffee231d04ff5eabe2c65bd2e9a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1aaad4ffee231d04ff5eabe2c65bd2e9a8" kindref="member">ScalarTypeJacobian</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SplineType&amp;<sp/>spline,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueryType*<sp/>query,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputType*<sp/>output)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref><sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">splinepy::utils::Array&lt;double&gt;</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>IntArray<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">splinepy::utils::Array&lt;int&gt;</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1proximity_1a6ffd1c98976d723d11bf5063020d9a7c" kindref="member">RealArray2D</ref><sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">splinepy::utils::Array&lt;double, 2&gt;</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>spline.SplinepyDim();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>derivative<sp/>query,<sp/>temp<sp/>result<sp/>holder,<sp/>view<sp/>on<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>IntArray<sp/>der_query(SplineType::kParaDim);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>der_query.Fill(0);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref><sp/>der_result(dim);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="namespacesplinepy_1_1proximity_1a6ffd1c98976d723d11bf5063020d9a7c" kindref="member">RealArray2D</ref><sp/>output_view(output,<sp/>dim,<sp/>SplineType::kParaDim);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>para_dim<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i{};<sp/>i<sp/>&lt;<sp/>SplineType::kParaDim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prepare<sp/>eye<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>++der_query[i];</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>derivative<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>spline.SplinepyDerivative(query,<sp/>der_query.data(),<sp/>der_result.data());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transposed<sp/>fill</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j{};<sp/>j<sp/>&lt;<sp/>dim;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_view(j,<sp/>i)<sp/>=<sp/>der_result[j];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>eye<sp/>query<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>--der_query[i];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>QueryType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="199" refid="namespacesplinepy_1_1splines_1_1helpers_1af08c758f2ee6ce109789332bd7c83cb1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1af08c758f2ee6ce109789332bd7c83cb1" kindref="member">ScalarTypeElevateDegree</ref>(SplineType&amp;<sp/>spline,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueryType<sp/>query,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntType<sp/>multiplicity<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1py_1a6ca8877984225027549de04c2388d551" kindref="member">Dim</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::Dimension_;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(SplineType::kHasKnotVectors)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BSplineLib<sp/>can<sp/>take<sp/>multiplicity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>spline.ElevateDegree(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacesplinepy_1_1py_1a6ca8877984225027549de04c2388d551" kindref="member">Dim</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(query),<sp/>multiplicity);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IntType<sp/>i{};<sp/>i<sp/>&lt;<sp/>multiplicity;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spline.ElevateDegree(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacesplinepy_1_1py_1a6ca8877984225027549de04c2388d551" kindref="member">Dim</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(query));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>QueryType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ToleranceType&gt;</highlight></codeline>
<codeline lineno="216" refid="namespacesplinepy_1_1splines_1_1helpers_1aa42eef74f70fed5db000351dd6f84358" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1aa42eef74f70fed5db000351dd6f84358" kindref="member">ScalarTypeReduceDegree</ref>(SplineType&amp;<sp/>spline,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueryType<sp/>query,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ToleranceType<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1py_1a6ca8877984225027549de04c2388d551" kindref="member">Dim</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::Dimension_;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Tol<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::Tolerance_;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spline.ReduceDegree(<ref refid="namespacesplinepy_1_1py_1a6ca8877984225027549de04c2388d551" kindref="member">Dim</ref>{query},<sp/>Tol{tolerance});</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>QueryDimType,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>QueryType,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="240" refid="namespacesplinepy_1_1splines_1_1helpers_1a6dcd426d8f7ea59e414c7e1ba4fc1f7e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1a6dcd426d8f7ea59e414c7e1ba4fc1f7e" kindref="member">ScalarTypeInsertKnot</ref>(SplineType&amp;<sp/>spline,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueryDimType<sp/>query_dim,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueryType<sp/>query,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntType<sp/>multiplicity)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1py_1a6ca8877984225027549de04c2388d551" kindref="member">Dim</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::Dimension_;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Knot<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::Knot_;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>BSpline::InsertKnot<sp/>is<sp/>void<sp/>func,<sp/>we<sp/>count<sp/>knots<sp/>before<sp/>and<sp/>after<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>it<sp/>was<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>knot_vector<sp/>=</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*spline.GetParameterSpace().GetKnotVectors()[query_dim];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>request<sp/>is<sp/>valid<sp/>before<sp/>BSplineLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>discussions<sp/>in<sp/>PR<sp/>#297</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>BSplineLib<sp/>now<sp/>also<sp/>has<sp/>runtime<sp/>bound<sp/>check,<sp/>which<sp/>raises<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para_bounds<sp/>=<sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1a7602f13d93f009d510e06319ff15ff33" kindref="member">GetParametricBounds</ref>(spline);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((para_bounds[0][query_dim]<sp/>&gt;=<sp/>query)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(para_bounds[1][query_dim]<sp/>&lt;=<sp/>query))<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_knots_before<sp/>=<sp/>knot_vector.GetSize();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>spline.InsertKnot(<ref refid="namespacesplinepy_1_1py_1a6ca8877984225027549de04c2388d551" kindref="member">Dim</ref>{query_dim},<sp/>Knot{query},<sp/>multiplicity);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_knots_after<sp/>=<sp/>knot_vector.GetSize();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n_knots_after<sp/>-<sp/>n_knots_before);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>QueryDimType,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>QueryType,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ToleranceType&gt;</highlight></codeline>
<codeline lineno="276" refid="namespacesplinepy_1_1splines_1_1helpers_1a64fa41c4a96e6ae83d468e1164021a7a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1a64fa41c4a96e6ae83d468e1164021a7a" kindref="member">ScalarTypeRemoveKnot</ref>(SplineType&amp;<sp/>spline,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QueryDimType<sp/>query_dim,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QueryType<sp/>query,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ToleranceType<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1py_1a6ca8877984225027549de04c2388d551" kindref="member">Dim</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::Dimension_;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Knot<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::Knot_;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Tol<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::Tolerance_;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>multiplicity<sp/>=</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spline.RemoveKnot(<ref refid="namespacesplinepy_1_1py_1a6ca8877984225027549de04c2388d551" kindref="member">Dim</ref>{query_dim},<sp/>Knot{query},<sp/>Tol{tolerance});</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>very<sp/>confusing<sp/>syntax,<sp/>let&apos;s<sp/>see<sp/>if<sp/>this<sp/>is<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>is<sp/>this<sp/>correct?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(multiplicity)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>splinepy::splines::helpers</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/helpers/scalar_type_wrapper.hpp"/>
  </compounddef>
</doxygen>
